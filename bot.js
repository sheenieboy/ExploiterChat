"use strict";
const WebSocket = require('ws');
require("dotenv").config()
const fs = require('fs');
const EncodeJS = require('./EncodeJS.js');
const ws = new WebSocket.Server({ port: process.env.WS_PORT, host: process.env.WS_ADDRESS });
//const ws = new WebSocket.Server({ port: 5304, host: "0.0.0.0" });//Test Port

const Discord = require("discord.js")
var mysql = require('mysql');
const moment = require('moment')
global.LoggedOnUsers = new Array();

var con = mysql.createConnection({
	host: "161.97.160.2",
	user: "Server",
	password: "UhbDHSnQAGD2awS1",
	database: "ExploiterChat"
});

const discordClient = new Discord.Client({
	partials: ["MESSAGE"],
	disableMentions: 'all', 
}) 

discordClient.commands = new Discord.Collection();
discordClient.owners = ["222106655188451328"] // My discord id
//cooldowns = new Discord.Collection();

const BOT_PREFIX = process.env.BOT_PREFIX

const commandFiles = fs.readdirSync('./commands').filter(file => file.endsWith('.js'));
for (const file of commandFiles) {
	const command = require(`./commands/${file}`);	discordClient.commands.set(command.name, command);
};

process.on('unhandledRejection', err => console.error(err));
discordClient.on('error', err => console.error(err));

discordClient.on("ready", () => {
	console.log("Bot is online.")
});

function mod(n, m) {
	return ((n % m) + m) % m;
}
function toHex(d) {
    return  ("0"+(Number(d).toString(16))).slice(-2).toUpperCase()
}

function toUTF8Array(str) {
    var utf8 = [];
    for (var i=0; i < str.length; i++) {
        var charcode = str.charCodeAt(i);
        if (charcode < 0x80) utf8.push(charcode);
        else if (charcode < 0x800) {
            utf8.push(0xc0 | (charcode >> 6), 
                      0x80 | (charcode & 0x3f));
        }
        else if (charcode < 0xd800 || charcode >= 0xe000) {
            utf8.push(0xe0 | (charcode >> 12), 
                      0x80 | ((charcode>>6) & 0x3f), 
                      0x80 | (charcode & 0x3f));
        }
        else {
            i++;
            charcode = 0x10000 + (((charcode & 0x3ff)<<10)
                      | (str.charCodeAt(i) & 0x3ff))
            utf8.push(0xf0 | (charcode >>18), 
                      0x80 | ((charcode>>12) & 0x3f), 
                      0x80 | ((charcode>>6) & 0x3f), 
                      0x80 | (charcode & 0x3f));
        }
    }
    return utf8;
}

function Decrypt(strr) {
	var key = 29394972;
	var str = strr.toString();
	var Var1 = key
	var Var2 = key + key
	var newString = "";
	for (var i = 0; i < str.length; i += 2) {
		var Decode = str.substr(i, 2)
		var Var3 = Var1 % 274877906944
		var Var4 = (Var1 - Var3) / 274877906944
		var Var5 = Var4 % 85
		Decode = parseInt(Decode, 16)
		var Var6 = (Decode + (Var4 - Var5) / 85) * (2 * Var5 + 1) % 256
		Var1 = Var3 * Var2 - Var4 + Decode + Var6
		newString = newString + String.fromCharCode(Var6)
	}
	return EncodeJS.decode(newString);
}

function Encrypt(Message) {
  	var key = 29394972;
	Message = "114,137,217|||" + Message
	//Message = Message
	var tab = {}
	for (i = 0; i <= 127; i++) {
		var a = -1 
		do { a += 2; } while (a * (2 * i + 1) % 256 != 1);
		tab[i] = a
	}
	var Var1 = key
	var Var2 = key + key
	var newString = "";	
	Message = toUTF8Array(Message)
	for (var i = 0; i < Message.length; i += 1) {
		var Encode = Message[i]
		var Var3 = mod(Var1, 274877906944)
		var Var4 = (Var1 - Var3) / 274877906944 
		var Var5 = mod(Var4, 85) 
		var Var6 = mod((Encode * tab[Var5] - (Var4 - Var5) / 85), 256)
		Var1 = Var3 * Var2 - Var4 + Var6 + Encode
		var dex = toHex(Var6).toString(16)
		newString = newString.concat(dex);
	}
	return newString
}

let xpAdd = Math.floor(Math.random() * 7) + 8;
discordClient.on("message", msg => {
	if((process.env.DEV_VERSION && !discordClient.owners.includes(msg.author.id)) || msg.author.bot) {
		return;
	}

	if (msg.channel.id == "798540440616960050") {
		if(!msg.content.startsWith(BOT_PREFIX)) {
			msg.delete()
			return;
		}
	}

	if (msg.channel.id === "798569809322311690" || msg.channel.id === "803365008058613780") { // #linked-chat -- #linked-chat-test
		if (msg.channel.type == 'text') {
			con.query("SELECT `id`,`Username`, `UniqueCode` FROM `Users` WHERE `DiscordID` = '" + msg.author.id + "' LIMIT 1", function (err, result) {
				if (result.length) {
					ws.clients.forEach(function each(client) {
						if (client.readyState === WebSocket.OPEN) { 
							client.send(JSON.stringify({'Rank': "From Discord", 'Username': result[0].Username, 'Message': Encrypt(msg.content).replace(/[\[\]&]+/g, '')}));
						}
					})
				}
			});
		}
	}

	if (!msg.content.startsWith(BOT_PREFIX)) {
		con.query("SELECT `XP`,`Level` FROM `Users` WHERE `DiscordID` = '" + msg.author.id + "' LIMIT 1", function (err, result) {
			if(err) return console.log(err); 
			if(result.length) {
				let CurrentXP =  result[0].XP + xpAdd;
				let CurrentLevel = result[0].Level;

				let nxtLvlXP = CurrentLevel * 300;
				if(nxtLvlXP <= CurrentXP) {
					CurrentLevel = CurrentLevel + 1;
					let difference = CurrentXP - nxtLvlXP;
					let LvlMsg = new Discord.MessageEmbed()
					.setAuthor(msg.author.username)
					.setTitle("Level Up!")
					.setColor('76b3fc')
					.addField(`New Level`, CurrentLevel, true)
					msg.channel.send(LvlMsg).then(Message => {Message.delete({timeout: 5000})});

					con.query("UPDATE `Users` SET `Level` = '" + CurrentLevel + "' WHERE `DiscordID` = '" + msg.author.id + "'", function (err, result) {});
					if(CurrentLevel >= 10) {
						msg.member.roles.add("801144046537408565");
						let ActiveRollMsg = new Discord.MessageEmbed()
						.setAuthor(msg.author.username)
						.setTitle("Congrats!")
						.setColor('76b3fc')
						.addField(`You have recieved the Active role for being so active in the server!`, CurrentLevel, true)
						msg.channel.send(ActiveRollMsg);
					}
				}
				con.query("UPDATE `Users` SET `XP` = '" + CurrentXP + "' WHERE `DiscordID` = '" + msg.author.id + "'", function (err, result) {});
			}
		});
	}

	if (!msg.content.startsWith(BOT_PREFIX) || msg.author.bot) return;
	const args = msg.content.slice(BOT_PREFIX.length).trim().split(' ');
	const commandName = args.shift().toLowerCase();

	const command = discordClient.commands.get(commandName) || discordClient.commands.find(cmd => cmd.aliases && cmd.aliases.includes(commandName));
	if (!command) return;

	if (command.ownerOnly && (!discordClient.owners.includes(msg.author.id))) {
		return msg.channel.send(`You need to be the bot owner!`).then(Message => { Message.delete({timeout: 5000})})
	};

	if (command.moderatorsOnly && !(msg.member.roles.cache.find(r => r.id === "789296126431592478"))) { // Moderator rank
		return msg.channel.send(`You need to be a Moderator!`).then(Message => { Message.delete({timeout: 5000})})
	};
	if (command.guildOnly && (msg.channel.type == 'dm')) {
		return msg.channel.send(`This command doesn't work inside DMs!`).then(Message => { Message.delete({timeout: 5000})})
	} else if (msg.channel.id !== "798540440616960050" && msg.channel.id !== "798557506011660358" && msg.channel.type != 'dm') { //bot-commands / mod-bot-commands
		return msg.channel.send(`Please use commands in #bot-commands!`).then(Message => { Message.delete({timeout: 5000})})
	}

	try {
		command.run(discordClient, msg, args, con);
		const CHANNEL = 'logs';
		if (msg.channel.type == 'text') {
			var logger = msg.guild.channels.cache.find(
				channel => channel.name === CHANNEL
			);
			if (logger) {
				const embed = new Discord.MessageEmbed()
				.setTitle('Ran Command')
				.addField('User', msg.author.username)
				.addField('Command', msg.cleanContent)
				.setThumbnail(msg.author.avatarURL)
				.setColor('0x00AAFF');
				logger.send({ embed });
			}
		}
	} catch (error) {
		msg.channel.send(`There was an error whilst executing that command: \`${error}\``)
	}
})

discordClient.login(process.env.BOT_TOKEN)

discordClient.on('ready', message  => {
	discordClient.user.setActivity("$help")
});
var users = {}

ws.on('connection', function connection(wss, req) {
	con.query("SELECT * FROM `BannedIp` WHERE `IpAddress` = '" + req.socket.remoteAddress + "'", function(err,rows) {
		if(err) return console.log(err);
		if (rows.length) {
			wss.close()
			return;
		}
	});
	var data = {};
	wss.send(JSON.stringify({'Action': 'Keep Alive!'}));
	wss.on('close', function() {
		const index = global.LoggedOnUsers.indexOf(data.Username);
		if (index > -1) {
			global.LoggedOnUsers.splice(index, 1);
			ws.clients.forEach(function each(client) {
				if (client.readyState === WebSocket.OPEN) { 
					client.send(JSON.stringify({'Action': 'Player Left','Username': data.Username}));
				}
			});
		}
    });
	
	wss.on('end', function() {
		const index = global.LoggedOnUsers.indexOf(data.Username);
		if (index > -1) {
			global.LoggedOnUsers.splice(index, 1);
			ws.clients.forEach(function each(client) {
				if (client.readyState === WebSocket.OPEN) { 
					client.send(JSON.stringify({'Action': 'Player Left','Username': data.Username})); 
				}
			});
		}
    });
	
	wss.on('disconnect', function() {
		const index = global.LoggedOnUsers.indexOf(data.Username);
		if (index > -1) {
			global.LoggedOnUsers.splice(index, 1);
			ws.clients.forEach(function each(client) {
				if (client.readyState === WebSocket.OPEN) { 
					client.send(JSON.stringify({'Action': 'Player Left','Username': data.Username})); 
				}
			});
		}
    });
	
    wss.on('message', function incoming(message) {
		const MessageData = JSON.parse(message);
		var Username = MessageData['Username']
		if(Username) {
			Username = Username.replace(/[^\w\s]/gi, '')
		}
		if(typeof(users[Username]) == 'undefined') {
			users[Username] = {
				Username:		Username,
			  score:           0,
			  lastInteraction: moment(),
			}
		}
		
		data = users[Username];
    	if (message === 'Keep Alive!') { 
			return wss.send('Keep Alive!'); 
		}
		if (MessageData['Action'] == 'GetUsers') { 
			return wss.send(JSON.stringify({'Action': 'ActivePlayers', 'Message': global.LoggedOnUsers.length})); 
		}
		
   		let lessThanFour = message.length < 1 ? true : false;
		con.query("SELECT * FROM `Users` WHERE `Username` = '" + MessageData['Username'] + "' AND `UniqueCode` = '" + MessageData['UniqueCode'] + "' LIMIT 1", function(err,rows){
			if (!rows.length)
			{
				if (MessageData['Action'] == 'Register') {
					if(Username.length >= 4) {
						if(MessageData['UniqueCode'].length >= 5) {
							con.query("SELECT * FROM `Users` WHERE `IpAddress` = '" + req.socket.remoteAddress + "'", function(err,getByIp){
								//console.log(getByIp.length);
								if(getByIp.length <= 2) {
									con.query("SELECT * FROM `Users` WHERE `Username` = '" + Username + "' LIMIT 1", function(err,rows){
										if (!rows.length)
										{
											con.query("INSERT INTO `Users` (`Username`, `UniqueCode`, `IpAddress`) VALUES ('" + Username + "', '" + MessageData['UniqueCode'] + "', '" + req.socket.remoteAddress + "')", function (err, result) { if (err) console.log(err); });
											return wss.send(JSON.stringify({'Action': 'RegistrationSuccessful'})); 
										} else {
											if(rows[0].UniqueCode == "Default") {
												con.query("UPDATE `Users` SET `UniqueCode` = '" + MessageData['UniqueCode'] + "' WHERE `Username` = '" + Username + "'", function (err, result) { if (err) console.log(err); });
												return wss.send(JSON.stringify({'Action': 'RegistrationSuccessful'})); 
											}
											return wss.send(JSON.stringify({'Action': 'Error', 'Message': "Details dont match"})); 
										}
									});
								} else {
									return wss.send(JSON.stringify({'Action': 'Error', 'Message': "You can only have 2 accounts per household"}));
								}
							});
						} else {
							return wss.send(JSON.stringify({'Action': 'Error', 'Message': "Memorable Key needs to be 5 or more characters"})); 
						}
					} else {
						return wss.send(JSON.stringify({'Action': 'Error', 'Message': "Username needs to be more than 4 or more characters"})); 
					}
				} else {
					return wss.send(JSON.stringify({'Action': 'Error', 'Message': "Invalid login details"})); 
				}
			} else {
				if (MessageData['Action'] == 'Login' || MessageData['Action'] == 'Register') {
					if(global.LoggedOnUsers.indexOf(Username) !== -1) {
						wss.send(JSON.stringify({'Action': 'Error', 'Message': 'User already logged on'})); 
						return;
					} else {
						global.LoggedOnUsers.push(Username);
						wss.send(JSON.stringify({'Action': 'LoginSuccessful'})); 
						return;
					}
				}
				if (MessageData['Action'] == 'PurgeChat') {
					if(rows[0].Commands != true) {
						return;
					}
				}
				if (MessageData['Action'] == 'DelMessage') {
					if(rows[0].Commands != true) {
						return;
					}
				}
				if(rows[0].Commands == true) {
					if (MessageData['Action'] == 'GetUsernames') {
						//wss.send(JSON.stringify({'Action': 'ShowUsernames', 'Message': 'Users online: ' + global.LoggedOnUsers.toString()}));
						wss.send(JSON.stringify({'Action': 'ShowUsernames', 'Message': 'Users online: ' + global.LoggedOnUsers.join(', ')}));
						return; 
					} else if (MessageData['Action'] == 'Mute') {
						con.query("SELECT * FROM `Users` WHERE `Username` = '" + MessageData['ToPlayer'] + "'", function (err, result) {
							if (result.length) {
								var TimeToMute = MessageData["Time"];
								if(TimeToMute)
								con.query("UPDATE `Users` SET `Muted` = true WHERE `Username` = '" + MessageData['ToPlayer'] + "'", function (err, result) { if (err) console.log(err); });
								con.query("INSERT INTO `ModeratorLogs` (`Username`,`Action`,`Time`,`IpAddress`) VALUES ('" + Username + "','Muted user: " + MessageData['ToPlayer'] + "','" + moment().format('YYYY-MM-DD HH:mm:ss') + "','" + req.socket.remoteAddress + "')", function (err, result) { if (err) console.log(err); });
							}
						});
						return; 
					} else if (MessageData['Action'] == 'UnMute') { 
						con.query("SELECT * FROM `Users` WHERE `Username` = '" + MessageData['ToPlayer'] + "'", function (err, result) {
							if (result.length)
							{
								con.query("UPDATE `Users` SET `Muted` = false WHERE `Username` = '" + MessageData['ToPlayer'] + "'", function (err, result) { if (err) console.log(err); });
								con.query("INSERT INTO `ModeratorLogs` (`Username`,`Action`,`Time`,`IpAddress`) VALUES ('" + Username + "','Unmuted user: " + MessageData['ToPlayer'] + "','" + moment().format('YYYY-MM-DD HH:mm:ss') + "','" + req.socket.remoteAddress + "')", function (err, result) { if (err) console.log(err); });
							}
						});
						return; 
					} else if (MessageData['Action'] == 'TempBan') { 
						con.query("SELECT * FROM `Users` WHERE `Username` = '" + MessageData['ToPlayer'] + "'", function (err, result) {
							if (result.length)
							{
								con.query("UPDATE `Users` SET `TempBanned` = '" + moment().add(MessageData['Minutes'], 'minutes').format('YYYY-MM-DD HH:mm:ss') + "' WHERE `Username` = '" + MessageData['ToPlayer'] + "'", function (err, result) { if (err) console.log(err); });
								con.query("INSERT INTO `ModeratorLogs` (`Username`,`Action`,`Time`,`IpAddress`) VALUES ('" + Username + "','Temp Banned user: " + MessageData['ToPlayer'] + "','" + moment().format('YYYY-MM-DD HH:mm:ss') + "','" + req.socket.remoteAddress + "')", function (err, result) { if (err) console.log(err); });
							}
						});
						return;
					} else if (MessageData['Action'] == 'Ban') { 
						con.query("SELECT * FROM `Users` WHERE `Username` = '" + MessageData['ToPlayer'] + "'", function (err, result) {
							if (result.length)
							{
								if(result[0].DiscordID != null) {
									var User = discordClient.guilds.cache.get("789295332378148914").members.cache.get(result[0].DiscordID);
									if(User) { 
										User.ban()
									}
								}
								con.query("UPDATE `Users` SET `Banned` = true WHERE `Username` = '" + MessageData['ToPlayer'] + "'", function (err, result) { if (err) console.log(err); });
								con.query("INSERT INTO `ModeratorLogs` (`Username`,`Action`,`Time`,`IpAddress`) VALUES ('" + Username + "','Banned user: " + MessageData['ToPlayer'] + "','" + moment().format('YYYY-MM-DD HH:mm:ss') + "','" + req.socket.remoteAddress + "')", function (err, result) { if (err) console.log(err); });
							}
						});
						return;
					} else if (MessageData['Action'] == 'UnBan') {
						con.query("SELECT * FROM `Users` WHERE `Username` = '" + MessageData['ToPlayer'] + "'", function (err, result) {
							if (result.length)
							{
								con.query("UPDATE `Users` SET `Banned` = false, `TempBanned` = 0 WHERE `Username` = '" + MessageData['ToPlayer'] + "'", function (err, result) { if (err) console.log(err); });
								con.query("INSERT INTO `ModeratorLogs` (`Username`,`Action`,`Time`,`IpAddress`) VALUES ('" + Username + "','Unbanned user: " + MessageData['ToPlayer'] + "','" + moment().format('YYYY-MM-DD HH:mm:ss') + "','" + req.socket.remoteAddress + "')", function (err, result) { if (err) console.log(err); });
							}
						});
						return;
					} else if (MessageData['Action'] == 'UnBanIp') {
						con.query("SELECT * FROM `Users` WHERE `Username` = '" + MessageData['ToPlayer'] + "' LIMIT 1", function (err, result) {
							if (result.length)
							{
								con.query("DELETE FROM `BannedIp` WHERE `IpAddress` = '" + result[0].IpAddress + "'", function (err, result) { if (err) console.log(err); });
								con.query("INSERT INTO `ModeratorLogs` (`Username`,`Action`,`Time`,`IpAddress`) VALUES ('" + Username + "','Un-IpBanned user: " + MessageData['ToPlayer'] + ", IpAddress: " + result[0].IpAddress + "','" + moment().format('YYYY-MM-DD HH:mm:ss') + "','" + req.socket.remoteAddress + "')", function (err, result) { if (err) console.log(err); });
							}
						});
						return;
					} else if (MessageData['Action'] == 'BanIp') {
						con.query("SELECT * FROM `Users` WHERE `Username` = '" + MessageData['ToPlayer'] + "' LIMIT 1", function (err, result) {
							if (result.length) {
								con.query("INSERT INTO `BannedIp` (`IpAddress`) VALUES ('" + result[0].IpAddress + "')", function (err, result) { if (err) console.log(err); });
								con.query("INSERT INTO `ModeratorLogs` (`Username`,`Action`,`Time`,`IpAddress`) VALUES ('" + Username + "','IpBanned user: " + MessageData['ToPlayer'] + ", IpAddress: " + result[0].IpAddress + "','" + moment().format('YYYY-MM-DD HH:mm:ss') + "','" + req.socket.remoteAddress + "')", function (err, result) { if (err) console.log(err); });
							}
						});
						return;
					}
				}
				if(rows[0].Muted == true) {
					wss.send(JSON.stringify({'Action': 'Server', 'Message': 'You are muted. If you think this is an error, join the official Discord and dispute it.'}));
					return;
				}
				if(rows[0].Banned == true) {
					wss.send(JSON.stringify({'Action': 'CloseError', 'Message': 'You have been banned from the chat. If you think this is an error, join the official Discord and dispute it'}));
					wss.close()
					return;
				}
				if (rows[0].TempBanned != 0) {
					if (moment(new Date(rows[0].TempBanned)).diff(moment(), 'seconds') >= 1) {
						wss.send(JSON.stringify({'Action': 'CloseError', 'Message': 'You have been banned from the chat. If you think this is an error, join the official Discord and dispute it'}));
						wss.close()
						return;
					} else {
						con.query("UPDATE `Users` SET `TempBanned` = 0 WHERE `Username` = '" + Username + "'", function (err, result) { if (err) console.log(err); });
					}
				}
				if (MessageData['Action'] == 'setPreferences') {
					con.query("UPDATE `Users` SET `ProfileAccessable` = '" + MessageData['ProfileAccessable'] + "' WHERE `Username` = '" + Username + "'", function (err, result) { if (err) console.log(err); });
					return;
				}
				if (MessageData['Action'] == 'getProfile') {
					con.query("SELECT * FROM `Users` WHERE `Username` = '" + MessageData['findPlayer'] + "' LIMIT 1", function (err, result) {
						if (result.length) {
							if(result[0].ProfileAccessable != 0 && result[0].LastPlayed != null && result[0].Exploit != null && result[0].UserId != null) {
								var isOnline = false
								if(global.LoggedOnUsers.indexOf(MessageData['findPlayer']) !== -1) {
									isOnline = true;
								}
								wss.send(JSON.stringify({'Action': 'FoundPlayerProfile', 'DiscordID': result[0].ProfileID, 'FoundUsername': MessageData['findPlayer'], 'OnlineStatus': isOnline, 'Rank': result[0].Rank, 'LastPlayed': result[0].LastPlayed, 'Exploit': result[0].Exploit, 'UserId': result[0].UserId}));
							} else {
								wss.send(JSON.stringify({'Action': 'Error', 'Message': "Profile not accessable"}));
							}
						} else { 
							wss.send(JSON.stringify({'Action': 'Error', 'Message': "User not found"}));
						}
					});	
					return;
				}
				if (MessageData['Action'] == 'New User') {
					con.query("UPDATE `Users` SET `UserId` = '" + MessageData['UserId'] + "', `LastPlayed` = '" + MessageData['PlaceId'] + "', `Exploit` = '" + MessageData['Exploit'] + "', `IpAddress` = '" + req.socket.remoteAddress + "' WHERE `Username` = '" + Username + "'", function (err, result) { if (err) console.log(err); });
					wss.send(JSON.stringify({'Action': 'GiveRank', 'Rank': rows[0].Rank, 'Commands': rows[0].Commands, 'ProfileAccessable': rows[0].ProfileAccessable}));
				} else {
					con.query("UPDATE `Users` SET `MessagesSent` = MessagesSent + 1 WHERE `Username` = '" + Username + "'", function (err, result) { if (err) console.log(err); });
				}
				
				var newMessage = MessageData;
				newMessage['Rank'] = rows[0].Rank;
				delete newMessage['UniqueCode'];
				const lastInteraction = moment.duration(moment().diff(data.lastInteraction)).asSeconds()
				data.lastInteraction = moment();
				if (lastInteraction < 1) {
					data.score++
				}
				if (lastInteraction >= 1) {
					const newScore = data.score - Math.round(lastInteraction)
					data.score = newScore
					if (newScore <= 0) {
						data.score = 0;
					}
				}
				if (data.score >= 3) {
					data.score = 0;
					wss.send(JSON.stringify({'Action': 'CloseError', 'Message': 'You have been kicked from the chat for spamming. You will be banned if you keep doing this.'}));
					con.query("UPDATE `Users` SET `TimesKicked` = TimesKicked + 1, `LastKicked` = '" + moment().format('YYYY-MM-DD HH:mm:ss') + "' WHERE `Username` = '" + Username + "'", function (err, result) { if (err) console.log(err); });
					con.query("SELECT * FROM `Users` WHERE `Username` = '" + Username + "'", function (err, result) {
						if (result.length) {
							if(result[0].TimesKicked == 2) {
								con.query("UPDATE `Users` SET `TempBanned` = '" + moment().add(30, 'minutes').format('YYYY-MM-DD HH:mm:ss') + "' WHERE `Username` = '" + Username + "'", function (err, result) { if (err) console.log(err); });
							} else if(result[0].TimesKicked >= 3) {
								con.query("UPDATE `Users` SET `Banned` = true WHERE `Username` = '" + Username + "'", function (err, result) { if (err) console.log(err); });
							}
						}
					});
					wss.close()
					return;
				}
				if(newMessage["Message"] && newMessage["Action"] == "Message") {
					if(newMessage["Global"] == true) {
						var DecryptedMsg = Decrypt(newMessage["Message"]).split("|||")[1]
						if(discordClient && DecryptedMsg != "PM" && DecryptedMsg != "undefined" && typeof(DecryptedMsg) != 'undefined') {
							if(new RegExp("([a-zA-Z0-9]+://)?([a-zA-Z0-9_]+:[a-zA-Z0-9_]+@)?([a-zA-Z0-9.-]+\\.[A-Za-z]{2,4})(:[0-9]+)?(/.*)?").test(DecryptedMsg)) {
								
								return;
							}
							if(process.env.DEV_VERSION) {
								discordClient.channels.cache.get('803365008058613780').send("**[" + Username + "]**: " + DecryptedMsg);
							} else {
								discordClient.channels.cache.get('798569809322311690').send("**[" + Username + "]**: " + DecryptedMsg);
							}
						}
					}
				}
				ws.clients.forEach(function each(client) {
					if (client.readyState === WebSocket.OPEN && !lessThanFour) client.send(JSON.stringify(newMessage));
				});
			}
		});
    });
});