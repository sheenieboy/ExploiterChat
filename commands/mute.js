const Discord = require('discord.js');
const moment = require('moment')
module.exports = {
	name: 'mute',
	aliases: ['mute','tempmute'],
	guildOnly: true,
	ownerOnly: false,
	moderatorsOnly: true,
	cooldown: 2,
	description: 'Mute a user',
	usage: '<@Username/UserID> <Time> <Reason>',
	async run(client, message, args, con) {
        var TimeToMute = moment();
       // var a = args
       // var i;
      //  for (i = 1; i < a.length; i++) {
        //var addTime = a[i];
        var PunishmentTime;
        var addTime = args[1];
        if(!addTime) {
            return message.channel.send('Please provide a time.');
        }
        if(addTime.toLowerCase() == "perm") {
            TimeToMute = TimeToMute.add(50, 'years')
            PunishmentTime = "Lifetime";
        } else if(addTime.includes("d")) {
            TimeToMute = TimeToMute.add(addTime.replace(/[^0-9]/g,''), 'days')
            PunishmentTime = `${addTime.replace(/[^0-9]/g,'')} Days`;
        } else if(addTime.includes("y")) {
            TimeToMute = TimeToMute.add(addTime.replace(/[^0-9]/g,''), 'years')
            PunishmentTime = `${addTime.replace(/[^0-9]/g,'')} Years`;
        } else if(addTime.includes("m")) {
            TimeToMute = TimeToMute.add(addTime.replace(/[^0-9]/g,''), 'minutes')
            PunishmentTime = `${addTime.replace(/[^0-9]/g,'')} Minutes`;
        } else if(addTime.includes("s")) {
            TimeToMute = TimeToMute.add(addTime.replace(/[^0-9]/g,''), 'seconds')
            PunishmentTime = `${addTime.replace(/[^0-9]/g,'')} Seconds`;
        } else if(addTime.includes("h")) {
            TimeToMute = TimeToMute.add(addTime.replace(/[^0-9]/g,''), 'hours')
            PunishmentTime = `${addTime.replace(/[^0-9]/g,'')} Hours`;
        }
       // }

        var taggedUser = message.mentions.members.first();
        if (!taggedUser) {
            if(message.guild.members.cache.get(args[0])) {
                taggedUser = message.guild.members.cache.get(args[0]);
            }
        }

        var reason = args[1];
        for (i = 2; i < args.length; i++) {
            if(args[i]) {
                reason = reason + " " + args[i];
            }
        }
        if(taggedUser) { 
            MuteDiscord(taggedUser)
            con.query("SELECT `Username` FROM `Users` WHERE `DiscordID` = '" + taggedUser.id + "'", function (err, discordC) {
                if(discordC.length) {
                    con.query("UPDATE `Users` SET `Muted` = '" + TimeToMute.format('YYYY-MM-DD HH:mm:ss') + "' WHERE `DiscordID` = '" + taggedUser.id + "'", function (err, result) { if (err) console.log(err); });
                    con.query("INSERT INTO `ModeratorLogs` (`Username`,`Action`,`Time`,`IpAddress`) VALUES ('DiscordID: " + message.author.id + "','Muted user: " + taggedUser.id + ", Reason: "+ reason + "','" + moment().format('YYYY-MM-DD HH:mm:ss') + "','From Discord')", function (err, result) { if (err) console.log(err); });
                }
            });
        } else {
            con.query("SELECT `DiscordID` FROM `Users` WHERE `Username` = '" + args[0] + "'", function (err, discordC) {
                if(discordC.length) {
                    taggedUser = message.guild.members.cache.get(discordC[0].DiscordID);
                    con.query("UPDATE `Users` SET `Muted` = '" + TimeToMute.format('YYYY-MM-DD HH:mm:ss') + "' WHERE `Username` = '" + args[0] + "'", function (err, result) { if (err) console.log(err); });
                    con.query("INSERT INTO `ModeratorLogs` (`Username`,`Action`,`Time`,`IpAddress`) VALUES ('DiscordID: " + message.author.id + "','Muted user: " + args[0] + ", Reason: "+ reason + "','" + moment().format('YYYY-MM-DD HH:mm:ss') + "','From Discord')", function (err, result) { if (err) console.log(err); });
                    MuteDiscord(taggedUser)
                }
            });
        }
        
        async function MuteDiscord(User) {
            const muterole = message.guild.roles.cache.find((role) => role.name === 'Muted');
            if(!muterole){
                try{
                    var role = await message.guild.roles.create({
                        data:{
                            name: "Muted",
                            color: "#000000",
                            permissions:[]
                        },
                        reason: "Mute Role",
                    })
                    message.guild.channels.cache.forEach(async (channel, id) => {
                        await channel.updateOverwrite(role, {
                            SEND_MESSAGES: false,
                            SPEAK: false,
                            ADD_REACTIONS: false,
                            SEND_TTS_MESSAGES: false,
                            ATTACH_FILES: false 
                        })
                    });
                } catch(e) {
                    console.log(e.stack);
                }
            }
            
            if (!User) {
                return message.channel.send('Wasn\'t able to mute their discord.');
            }

            let roleMute = message.guild.roles.cache.find(
                (role) => role.name === 'Muted'
            );

            if(!roleMute) {
                return message.channel.send('Couldnt find Mute Role.');
            }

            if(message.member.roles.cache.find(r => r.id === roleMute.id)) {
                return message.channel.send('User is already muted.');   
            }

            let usermsg = new Discord.MessageEmbed()
            .setTitle(`${User.user.username} has been Muted Successfully.`)
            .setColor('76b3fc')
            .addField('Action taken against',  `<@${User.user.id}>`)
            .addField('Reason', `${reason}`)
            .addField('Muted By',  `<@${message.author.id}>`)
            .setFooter(`Do not attempt to bypass`);

            User.roles.add(roleMute);
            usermsg.addField('Punishment Time:', PunishmentTime)
            setTimeout(() => {
                User.roles.remove(roleMute);
            }, TimeToMute.diff(moment(), 'milliseconds'));
            message.channel.send(usermsg);
        }
    }
};