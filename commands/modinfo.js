const Discord = require('discord.js');
var request = require('request');
module.exports = {
	name: 'modinfo',
	aliases: ['modinfo'],
	guildOnly: true,
	ownerOnly: false,
	moderatorsOnly: true,
	cooldown: 2,
	description: 'Display some user information',
	usage: '<@Username/Username>',
	async run(client, message, args, con) {
		function displayUser(UserInfo) {
            if(UserInfo) {
                var url = `http://api.roblox.com/Marketplace/ProductInfo?assetId=${UserInfo.LastPlayed}`;
                request.get({
                    url: url,
                    json: true,
                    headers: {'User-Agent': 'request'}
                }, (err, res, data) => {
                    if (err) {
                        console.log('Error:', err);
                    } else if (res.statusCode == 200) {
                       var LoggedOnUsers = global.LoggedOnUsers;
                       var useThisUsername = "Not Linked";
                       if(UserInfo.DiscordID) {
                            var getUser = client.guilds.cache.get("789295332378148914").members.cache.get(UserInfo.DiscordID);
                            if(getUser) {
                                useThisUsername = `${getUser.user.username}#${getUser.user.discriminator}`;
                            }
                        }
                       let embed = new Discord.MessageEmbed()
                       .setColor('RANDOM')
                       .addField('Username', UserInfo.Username, true)
                       .addField('Nickname', UserInfo.Nickname, true)
                       .addField('Online Status in ExploiterChat', LoggedOnUsers.indexOf(UserInfo.Username) !== -1 ? "Online" : "Offline", true)
                       .addField('Title', UserInfo.Rank, true)
                       .addField('Discord', useThisUsername, true)
					   .addField('Last Game Played', data.Name, true) 
					   .addField('Level', UserInfo.Level, true)
                       .addField('XP', UserInfo.XP, true)
                       .addField('Messages sent', UserInfo.MessagesSent, true)
                       .addField('Exploit', UserInfo.Exploit, true)
                       .addField('Warnings', UserInfo.Warnings, true)
                       .addField('Muted',  UserInfo.Muted == 0 ? "No" : "Yes", true)
                       .addField('Banned', UserInfo.Banned == 0 ? "No" : "Yes", true)
                       .addField('Temp Banned', UserInfo.TempBanned == 0 ? "No" : "Yes", true)
                       .addField('Times Kicked', UserInfo.TimesKicked, true)
                       .addField('Last Active', UserInfo.LastActive, true)
                       .setTimestamp()
                       .setFooter(`ID: ${message.guild.id}`);
                       message.channel.send(embed);
                    }
                });
            }
		}

		var taggedUser = message.mentions.users.first();
		var UserId;
		if (taggedUser) {
			con.query("SELECT * FROM `Users` WHERE `DiscordID` = '" + taggedUser.id + "' LIMIT 1", function (err, result) {
				if (result.length) { 
					displayUser(result[0])
					return;
				} else { 
					return message.channel.send(`User is not linked to an account`);
				}
			});
		} else {
			con.query("SELECT * FROM `Users` WHERE `Username` = '" + args[0] + "' LIMIT 1", function (err, result) {
				if (result.length) { 
					displayUser(result[0])
					return;
				} else { 
					return message.channel.send(`User not found`);
					
				}
			});
		}
	}
};