// Req Files // 
const config = require("../config.json")
// Req Files //

// Express // 
const express = require('express')
const app = express()
const path = require('path')
const PORT = config.web.PORT || 8080
const IP = config.web.IP
app.listen(PORT, () => console.log(`PayPal Server Listening at http://${IP}:${PORT}`))
app.set('view engine', 'ejs');
app.use(express.static(path.join(__dirname, 'public')));
app.get('/', (req, res) => {
    res.render('index')
})
// Express // 

// Discord // 
const Discord = require("discord.js")
const MessageEmbed = require("discord.js")
const {
    MessageCollector
} = require("discord.js-collector")
// Discord //

// PayPal //
const paypal = require('@paypal/checkout-server-sdk');
const {
    Console
} = require("console")
let clientId = `${config.paypal.auth.client_id}`;
let clientSecret = `${config.paypal.auth.client_secret}`;
//let environment = new paypal.core.LiveEnvironment(clientId, clientSecret);
let environment = new paypal.core.SandboxEnvironment("AQVmtBmWN8wrZ-sPhCa_V4ODhSg9lquALVBj42R2j5fkXG_DIZvQqWcVQTa1o04v86CJj8E6n7U_-n9K", "EAoc5IRo32USuMNZNqUZwE6At1SNK5GcoISLC74p8HAUayemjWFYwkoZjEgLAl2wGT6h6Zx7DUC6dGjm"); //TEST

let client = new paypal.core.PayPalHttpClient(environment)
// PayPal //
module.exports = {
	name: 'pay',
	aliases: ['pay'],
	guildOnly: true,
	ownerOnly: true,
	moderatorsOnly: false,
	cooldown: 2,
	description: 'Display some user information',
	usage: '<@Username/Username>',
	async run(discordBot, message, args, con) {

    message.delete()
/*
    let productPrice = new Discord.MessageEmbed()
        .setTitle('What is the price of the product?')
        .setColor('GREEN')

    const botMessage = await message.channel.send(productPrice);
    const userMessage = await MessageCollector.asyncQuestion({
        botMessage,
        user: message.author.id,
    });
    if (isNaN(userMessage.content)) {
        userMessage.delete();
        botMessage.delete();
        message.channel.send('`Error - Amount specified is not a valid integer.`').then(c => {
            c.delete({
                timout: 5000
            })
        })
        return;
    }

    let price = userMessage.content
    userMessage.delete()
   let productNameE = new Discord.MessageEmbed()
        .setTitle('What is the name of the product?')
        .setColor('GREEN')

    botMessage.edit(productNameE)
    const userMessage2 = await MessageCollector.asyncQuestion({
        botMessage,
        user: message.author.id,
    });

    let productName = userMessage2.content
    userMessage2.delete()

    let productDes = new Discord.MessageEmbed()
        .setTitle('What is the product description?')
        .setColor('GREEN')

    botMessage.edit(productDes)
    const userMessage4 = await MessageCollector.asyncQuestion({
        botMessage,
        user: message.author.id,
    });

    let productDescription = userMessage4.content
    botMessage.delete()
    userMessage4.delete()
    */
    let awaiting = await message.channel.send('`Generating Invoice`')
    let productName = "ExploiterChat VIP";
    let price = 0.01;
    let productDescription = "Includes ExploiterChat VIP tag and Discord Rank";
    let request = new paypal.orders.OrdersCreateRequest();
    request.requestBody({
        "intent": `${config.paypal.payment.intent}`,
        "application_context": {
            "return_url": `http://${config.web.IP}:${config.web.PORT}/paypal/return?messageid=${message.channel.id}`,
            "cancel_url": `http://${config.web.IP}:${config.web.PORT}/paypal/cancel?messageid=${message.channel.id}`,
            "brand_name": `${config.paypal.payment.application_context.brand_name}`,
            "locale": `en-US`,
            "user_action": `CONTINUE`
        },

        "purchase_units": [{
            "description": `${config.paypal.payment.product.description}`,
            "amount": {
                "currency_code": `${config.paypal.payment.product.currency}`,
                "value": `${price}`,
                "breakdown": {
                    "item_total": {
                        "currency_code": `${config.paypal.payment.product.currency}`,
                        "value": `${price}`,
                    },
                }
            },
            "items": [
                {
                    "name": `${productName}`,
                    "description": `${productDescription}`,
                    "quantity": "1",
                    "unit_amount": {
                        "currency_code": `${config.paypal.payment.product.currency}`,
                        "value": `${price}`,
                    },
                }

            ]
        }]
    });
    let createOrder = async function() {
        let response = await client.execute(request);
        let payment_url = response.result.links

        let paymentEmbed = new Discord.MessageEmbed()
            .setTitle('Invoice')
            .setDescription(`Please pay Â£${price} for the following service. To pay now click [here](${payment_url[1].href})`)
            .addField('Price', price)
            .addField('Product Name', productName)
            .addField('Product Description', productDescription)
            .setFooter('xPayments | By Akash Deb')
            .setThumbnail('https://cdn.discordapp.com/attachments/791735100169519124/797882988351455272/paypal-logo-2120.png')
            .setColor('BLUE')
        awaiting.edit(`\`Invoice Generated!\``)
        awaiting.edit(paymentEmbed)
    }
    createOrder();

    app.get("/paypal/return", (req, res) => {
        res.render('paymentConfirmed')
        let token = req.query.token
        let messageid = req.query.messageid

        let captureOrder = async function(orderId) {
            request = new paypal.orders.OrdersCaptureRequest(orderId);
            request.requestBody({});
            let response = await client.execute(request);

            let paymentConfirmed = new Discord.MessageEmbed()
                .setTitle('Payment Confirmed!')
                .setDescription('Your payment has been confirmed. Below is information about the payment.')
                .setColor('GREEN')

            try {
                discordBot.channels.cache.get(`${req.query.messageid}`).send(paymentConfirmed)
            } catch (err) {

            }

        }

        let capture = captureOrder(token);


    })

    app.get("/paypal/cancel", (req, res) => {
        res.render('cancelled')
    })
}
}